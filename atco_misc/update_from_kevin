#define PORT0 0xf200
#define PORT1 0xf204
#define PORT2 0xf208
#INCLUDE "Arduino.h"
#INCLUDE <unistd.h>
#INCLUDE <pc.h>
#INCLUDE <string.h>
BYTE eLUT[4][3]; //Current Encoder VAL: 0-3, Encoder COUNT Inc: -1, 0, 1
BYTE AB[8]; //(8) QUAD encoder outputs, (4) motor AND (4) image
INT eInc[8]; //(8) increment buffers, (4) motor AND (4) image
INT eCts[8]; //(8) encoder OUTPUT counters
BYTE eByte1, eByte2; //PORT(1) AND PORT(2) storage bytes
LONG MaxMtr, MaxImg; //SET which Motor axis IS master, AND which Image axis IS master
BYTE * POINTER;

void setup()
{

// PUT your setup CODE here, TO run ONCE:

//Generate Look-UP tables - one time ONLY

//Increment = -1 AB
eLUT[0][0]= 1; //AB OLD: 00 / AB NEW: 01
eLUT[1][0]= 3; //AB OLD: 01 / AB NEW: 11
eLUT[2][0]= 0; //AB OLD: 10 / AB NEW: 00
eLUT[3][0]= 2; //AB OLD: 11 / AB NEW: 10

//Increment = 0 AB
eLUT[0][1]= 0; //AB OLD: 00 / AB NEW: 00 = same, no change
eLUT[1][1]= 1; //AB OLD: 01 / AB NEW: 01 = same, no change
eLUT[2][1]= 2; //AB OLD: 10 / AB NEW: 10 = same, no change
eLUT[3][1]= 3; //AB OLD: 11 / AB NEW: 11 = same, no change

//Increment = +1 AB
eLUT[0][2]= 2; //AB OLD: 00 / AB NEW: 10
eLUT[1][2]= 0; //AB OLD: 01 / AB NEW: 00
eLUT[2][2]= 3; //AB OLD: 10 / AB NEW: 11
eLUT[3][2]= 1; //AB OLD: 11 / AB NEW: 01

outportb(PORT1+2, 0xff); // SET DIR REGISTER TO 0xff (SET ALL pins OF GPIO PORT 0 are OUTPUT)
outportb(PORT2+2, 0xff); // SET DIR REGISTER TO 0xff (SET ALL pins OF GPIO PORT 0 are OUTPUT)

}

void LOOP()
{

// PUT your MAIN CODE here, TO run repeatedly:

DO
{

//'*********************************************************************************
//'Timer code, buffer code, path code, etc., located here
//'*********************************************************************************

 

IF (MaxMtr) // 'max motor counter <> 0, write to motor port
{
AB[0]= eLUT[AB[0]][eInc[0]+1]; // 'using LUT, translate AB, based on current increment
AB[1]= eLUT[AB[1]][eInc[1]+1];
AB[2]= eLUT[AB[2]][eInc[2]+1];
AB[3]= eLUT[AB[3]][eInc[3]+1];
eByte1= AB[0] || AB[1]<< 2 || AB[2]<<4 || AB[3]<<6; //'combine to port value
outportb(PORT1, eByte1); //'set port pins to eByte1
eCts[0]+= eInc[0]; //'update counters
eCts[1]+= eInc[1];
eCts[2]+= eInc[2];
eCts[3]+= eInc[3];
}


IF (MaxImg) // 'max image counter <> 0, write to image port
{
AB[4]= eLUT[AB[4]][eInc[4]+1]; // 'using LUT, translate AB, based on current increment
AB[5]= eLUT[AB[5]][eInc[5]+1];
AB[6]= eLUT[AB[6]][eInc[6]+1];
AB[7]= eLUT[AB[7]][eInc[7]+1];
eByte2= AB[4] || AB[5]<<2 || AB[6]<<4 || AB[7]<<6; // 'combine to port value
outportb(PORT2, eByte2); // 'set port pins to eByte2
eCts[4]+= eInc[4]; //'update counters
eCts[5]+= eInc[5];
eCts[6]+= eInc[6];
eCts[7]+= eInc[7];
}

} WHILE (1);

}

